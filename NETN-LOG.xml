<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<objectModel xsi:schemaLocation="http://standards.ieee.org/IEEE1516-2010 http://standards.ieee.org/downloads/1516/1516.2-2010/IEEE1516-DIF-2010.xsd" xmlns="http://standards.ieee.org/IEEE1516-2010" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelIdentification notes="netn-log_1">
        <name>NETN LOG</name>
        <type>FOM</type>
        <version>2.0.0</version>
        <modificationDate>2019-06-13</modificationDate>
        <securityClassification>Not Classified</securityClassification>
        <releaseRestriction></releaseRestriction>
        <purpose> The NETN LOG module provides a common standard interface for negotiation, delivery and acceptance of logistics services where service providers and consumers are represented in different systems in a federated distributed simulation.</purpose>
        <applicationDomain>Training</applicationDomain>
        <description>The NATO Education and Training Network (NETN) Logistics FOM Module.

This module is a specification of how to represent logistics services provided to participants in a federated distributed simulation. The specification is based on IEEE 1516 High Level Architecture (HLA) Object Model Template (OMT) and primarily intended to support interoperability in a federated simulation (federation) based on HLA. An HLA OMT based Federation Object Model (FOM) is used to specify types of data and how it is encoded on the network. The NETN FOM FOM module is available as a XML file for use in HLA based federations.</description>
        <useLimitation> The NETN Logistics module covers the following services:  * Supply Service offered by a facility, unit or entity with a capability to provide supplies to the consumer. The supplies are transferred from the provider to the consumer of this service. * Storage Service offered by a facility, unit or entity with a capability to store supplies. The supplies are transferred from the consumer to the provider of this service. * Transport Service offered by a facility, unit or entity with a capability to transport non-consumable materiel. Units can embark, be transported and then disembark. * Repair service offered by a facility, unit or entity with the capability to repair non-consumables materiel, e.g platforms.  Examples of use:  * Refuelling of aircraft at an airbase or in the air * Transport of supplies between facilities * Repair of damaged platforms in facility or by unit * Transport of units, platforms, and humans by train, ship, or aircraft * Embarkment and disembarkment of units on platforms         </useLimitation>
        <useHistory>v2.0.0 - Merged separate LOG FOM modules into single NETN-LOG module.  </useHistory>
        <poc>
            <pocType>Primary author</pocType>
            <pocName>Lennart Olsson</pocName>
            <pocOrg>Pitch Technologies</pocOrg>
            <pocTelephone>+46134705500</pocTelephone>
            <pocEmail>lennart.olsson@pitchtechnologies.com</pocEmail>
        </poc>
        <poc>
            <pocType>Contributor</pocType>
            <pocName>Björn Löfstrand</pocName>
            <pocOrg>Pitch Technologies</pocOrg>
            <pocTelephone>+46702475152</pocTelephone>
            <pocEmail>bjorn.lofstrand@pitchtechnologies.com</pocEmail>
        </poc>
        <reference>
            <type>Dependency</type>
            <identification>NETN-BASE</identification>
        </reference>
        <other>
Copyright © 2019 by NATO/OTAN. All rights reserved.
This work is licensed under a Creative Commons Attribution-NoDerivatives 4.0 International License.

Above license gives you the right to use and redistribute the NETN FOM Module (XML file and Documentation) in its entirety without modification. You are also allowed to develop your own new FOM Modules (in separate XML files and separate documentation) that build-on/extends the NETN module by reference. You are NOT allowed to modify the NETN FOM Module or its documentation without prior permission by the NATO Modelling and Simulation Group.</other>
    </modelIdentification>
    <objects>
        <objectClass>
            <name>HLAobjectRoot</name>
        </objectClass>
    </objects>
    <interactions>
        <interactionClass>
            <name>HLAinteractionRoot</name>
            <interactionClass>
                <name>LOG_Service</name>
                <sharing>Neither</sharing>
                <transportation>HLAreliable</transportation>
                <order>Receive</order>
                <semantics>The LOG_Service interaction class is the base class for all NETN Service Consumer-Provider Pattern and logistics interactions. It contains the basic required parameters (not optional) that are always sent.</semantics>
                <parameter>
                    <name>ServiceID</name>
                    <dataType>ServiceIdentifier</dataType>
                    <semantics>Unique identifier for a service</semantics>
                </parameter>
                <parameter>
                    <name>Consumer</name>
                    <dataType>Callsign</dataType>
                    <semantics>Entity that has requested the service</semantics>
                </parameter>
                <parameter>
                    <name>Provider</name>
                    <dataType>Callsign</dataType>
                    <semantics>Providing or intended provider entity. If no provider is specified and the request is a common request shall en empty string be used as the Callsign.</semantics>
                </parameter>
                <parameter>
                    <name>ServiceType</name>
                    <dataType>LOG_ServiceTypeEnum8</dataType>
                    <semantics>Enumerated value describing the type of service</semantics>
                </parameter>
                <interactionClass>
                    <name>RequestService</name>
                    <sharing>Neither</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>The request for a service is always initiated by a LOG_RequestService. Subclasses of this interaction for specific types of services may include parameters for detailing the requirements of this request. This may include information when, where and how the service is to be delivered.</semantics>
                    <parameter>
                        <name>RequestTimeOut</name>
                        <dataType>TimeSecInt64</dataType>
                        <semantics>Wallclock time. The timeout time in seconds after 1 January 1970.</semantics>
                    </parameter>
                    <interactionClass>
                        <name>RequestRepair</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>Sent by the consumer when a repair for needed. Specifies entity and type of repair</semantics>
                        <parameter>
                            <name>RepairData</name>
                            <dataType>ArrayOfRepairStruct</dataType>
                            <semantics>List of all requested repairs.</semantics>
                        </parameter>
                        <parameter>
                            <name>Appointment</name>
                            <dataType>AppointmentStruct</dataType>
                            <semantics>Time and location for the exchenge of the service. Optional</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>RequestSupply</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>LOG_RequestSupply is used by a consumer to initiate a request for supply from a supply service provider. The amount and type of materiel is included in the request. In this request the consumer propose whether the loading is done by the provider or by the consumer.</semantics>
                        <parameter>
                            <name>SuppliesData</name>
                            <dataType>ArrayOfSupplyStruct</dataType>
                            <semantics>List of type and quantity of supplies requested.</semantics>
                        </parameter>
                        <parameter>
                            <name>LoadingDoneByProvider</name>
                            <dataType>HLAboolean</dataType>
                            <semantics>Proposes whether the service provider (LoadingDoneByProvider = true) or the service consumer (LoadingDoneByProvider = false) takes care of the (un)loading of the materiel. Default value is true.</semantics>
                        </parameter>
                        <parameter>
                            <name>Appointment</name>
                            <dataType>AppointmentStruct</dataType>
                            <semantics>Time and location for the exchange of the service. Optional</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>RequestTransport</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>A request for a Transport support. 
The request to transport, embark or disembark a platform is initiated by a LOG_RequestTransport interaction;</semantics>
                        <parameter>
                            <name>TransportData</name>
                            <dataType>TransportStruct</dataType>
                            <semantics>Data for the transport. Transported units and appointment data</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>RequestStorage</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>LOG_RequestStorage is used by a consumer to initiate a request for storage of supplies. The amount and type of materiel is included in the request.</semantics>
                        <parameter>
                            <name>SuppliesData</name>
                            <dataType>ArrayOfSupplyStruct</dataType>
                            <semantics>Specifies the supply (type and quantity)</semantics>
                        </parameter>
                        <parameter>
                            <name>LoadingDoneByProvider</name>
                            <dataType>HLAboolean</dataType>
                            <semantics>Proposes whether the service provider (LoadingDoneByProvider = true) or the service consumer (LoadingDoneByProvider = false) takes care of the (un)loading of the materiel. Default value is true.</semantics>
                        </parameter>
                        <parameter>
                            <name>Appointment</name>
                            <dataType>AppointmentStruct</dataType>
                            <semantics>The time and location for the exchange of the service. Optional</semantics>
                        </parameter>
                    </interactionClass>
                </interactionClass>
                <interactionClass>
                    <name>OfferService</name>
                    <sharing>Neither</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>The LOG_OfferService is usually a response to a LOG_RequestService and contains information with respect to the providing entities ability to deliver the requested service. This ability is expressed as either an offer to provide the service or no offer. Subclasses of this interaction for specific types of offers should contain more detailed description of the offer. This may include information about when, where, how the service can be delivered.</semantics>
                    <parameter>
                        <name>IsOffering</name>
                        <dataType>HLAboolean</dataType>
                        <semantics>Defines if the requested service is offered (=true) or not (=false). (Not Optional)</semantics>
                    </parameter>
                    <parameter>
                        <name>RequestTimeOut</name>
                        <dataType>TimeSecInt64</dataType>
                        <semantics>Wallclock time. The timeout time in seconds after 1 January 1970.</semantics>
                    </parameter>
                    <interactionClass>
                        <name>OfferRepair</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>The LOG_OfferRepair interaction class shall be sent by a federate simulating the service providing entity in response to a LOG_RequestRepair interaction.</semantics>
                        <parameter>
                            <name>RepairData</name>
                            <dataType>ArrayOfRepairStruct</dataType>
                            <semantics>List of the type of repairs offered. May be different from the list of requested repairs. List of all offered repairs if isOffering = true otherwise Undefined</semantics>
                        </parameter>
                        <parameter>
                            <name>Appointment</name>
                            <dataType>AppointmentStruct</dataType>
                            <semantics>Time and location for the exchenge of the service. Optional</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>OfferSupply</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>LOG_OfferSupply is used by a supply service provider to indicate which of the requested materiel (amount and type) can be offered. In this request the consumer decides whether the loading is done by the provider or by the consumer.</semantics>
                        <parameter>
                            <name>SuppliesData</name>
                            <dataType>ArrayOfSupplyStruct</dataType>
                            <semantics>List of type and quantity of supplies offered. May be different from the list of requested supplies. All offered supplies if isOffering = true otherwise Undefined</semantics>
                        </parameter>
                        <parameter>
                            <name>LoadingDoneByProvider</name>
                            <dataType>HLAboolean</dataType>
                            <semantics>Determines whether the service provider (LoadingDoneByProvider = true) or the service consumer (LoadingDoneByProvider = false) takes care of the (un)loading of the materiel.  Default value is true.</semantics>
                        </parameter>
                        <parameter>
                            <name>Appointment</name>
                            <dataType>AppointmentStruct</dataType>
                            <semantics>Time and location for the exchange of the service. Optional</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>OfferTransport</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>An Offer for a Transport support. 
The LOG_OfferTransport interaction shall be sent by the service providing federate in response to a LOG_RequestTransport interaction.</semantics>
                        <parameter>
                            <name>TransportData</name>
                            <dataType>TransportStruct</dataType>
                            <semantics>Data for the transport</semantics>
                        </parameter>
                        <parameter>
                            <name>OfferType</name>
                            <dataType>OfferTypeEnum32</dataType>
                            <semantics>Provide high level information about the acceptance of the request (Partial, Full)</semantics>
                        </parameter>
                        <parameter>
                            <name>Transporters</name>
                            <dataType>ArrayOfUuid</dataType>
                            <semantics>Platform list with transporters</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>OfferStorage</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>LOG_OfferStorage is used by a storage service provider to indicate which (amount and type) of the requested materiel can be stored.</semantics>
                        <parameter>
                            <name>SuppliesData</name>
                            <dataType>ArrayOfSupplyStruct</dataType>
                            <semantics>Specifies the supply (type and quantity)</semantics>
                        </parameter>
                        <parameter>
                            <name>LoadingDoneByProvider</name>
                            <dataType>HLAboolean</dataType>
                            <semantics>Determines whether the service provider (LoadingDoneByProvider = true) or the service consumer (LoadingDoneByProvider = false) takes care of the (un)loading of the materiel.  Default value is true.</semantics>
                        </parameter>
                        <parameter>
                            <name>Appointment</name>
                            <dataType>AppointmentStruct</dataType>
                            <semantics>The time and location for the exchange of the service. Optional</semantics>
                        </parameter>
                    </interactionClass>
                </interactionClass>
                <interactionClass>
                    <name>AcceptOffer</name>
                    <sharing>PublishSubscribe</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>The LOG_AcceptOffer is used to accept an offer made by a service providing entity as indicated in a SCP_OfferService interaction. By issuing a LOG_AcceptOffer interaction the service consuming entity enters a contract for service delivery with the service producing entity. 
 
The LOG_AcceptOffer interaction does not define any additional parameters but subclasses may include parameters with additional information.</semantics>
                </interactionClass>
                <interactionClass>
                    <name>ServiceStarted</name>
                    <sharing>PublishSubscribe</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>The LOG_ServiceStarted interaction is issued by a service providing entity to inform about the start of service delivery. The time of service delivery start may be significantly later then receiving a indication from the consumer that the service delivery can start. 
 
The SCP_ServiceStarted interaction does not define any additional parameters.</semantics>
                </interactionClass>
                <interactionClass>
                    <name>ServiceComplete</name>
                    <sharing>PublishSubscribe</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>The LOG_ServiceCompleted interaction is used by a service providing entity to inform the service consuming entity that the service has been delivered. 
 
The LOG_ServiceCompleted interaction does not define any additional parameters.</semantics>
                    <interactionClass>
                        <name>SupplyComplete</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>This interaction is sent by the provider when the supply is delivered to the consumer</semantics>
                        <parameter>
                            <name>SuppliesData</name>
                            <dataType>ArrayOfSupplyStruct</dataType>
                            <semantics>The amount of supplies, by type, that were transferred from provider to consumer.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>RepairComplete</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>This interaction is sent by the provider when the repair service is delivered to the consumer</semantics>
                        <parameter>
                            <name>RepairData</name>
                            <dataType>ArrayOfRepairStruct</dataType>
                            <semantics>List of the type of repairs done. May be different from the list of requested repairs.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>StorageComplete</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>This interaction is sent by the provider when the supply is delivered to the provider</semantics>
                        <parameter>
                            <name>SuppliesData</name>
                            <dataType>ArrayOfSupplyStruct</dataType>
                            <semantics>This interaction is sent by the provider when all supply is received by the provider</semantics>
                        </parameter>
                    </interactionClass>
                </interactionClass>
                <interactionClass>
                    <name>ServiceReceived</name>
                    <sharing>PublishSubscribe</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>The LOG_ServiceReceived interaction is used by a service consuming entity to inform the service providing entity that the service has been delivered. 
 
TheLOG_ ServiceReceived interaction does not define any additional parameters.</semantics>
                </interactionClass>
                <interactionClass>
                    <name>RejectOffer</name>
                    <sharing>PublishSubscribe</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>The LOG_RejectOffer is used to reject an offer made by a service providing entity as indicated in a LOG_OfferService interaction. By issuing a LOG_RejectOffer interaction the service consuming entity informs the providing entity that the offer has been rejected.</semantics>
                    <parameter>
                        <name>Reason</name>
                        <dataType>HLAASCIIstring</dataType>
                        <semantics>Allows to inform about the reason of the cancel (free text)</semantics>
                    </parameter>
                </interactionClass>
                <interactionClass>
                    <name>CancelService</name>
                    <sharing>PublishSubscribe</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>The LOG_CancelService interaction is used by either a service consuming entity or a service providing entity to inform about early termination of the service delivery or in some cases termination of the service request before delivery has begun.</semantics>
                    <parameter>
                        <name>Reason</name>
                        <dataType>HLAASCIIstring</dataType>
                        <semantics>Allows to inform about the reason of the cancel (free text)</semantics>
                    </parameter>
                </interactionClass>
                <interactionClass>
                    <name>ReadyToReceiveService</name>
                    <sharing>PublishSubscribe</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>The LOG_ReadyToReceiveService interaction is issued by a service consuming entity to indicate that the start of service delivery can start. The time of service delivery start may be significantly later then indicating ready for service delivery. 
 
The LOG_ReadyToReceiveService interaction does not define any additional parameters.</semantics>
                    <interactionClass>
                        <name>ReadyToReceiveRepair</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>This interaction is sent when the consumer is ready to receive the repair service. 
(At same location as the provider)</semantics>
                        <parameter>
                            <name>RepairData</name>
                            <dataType>ArrayOfRepairStruct</dataType>
                            <semantics>The repairs, by type, that the consumer is able to accept at the time it declares ReadyToReceive.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>ReadyToReceiveSupply</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>This interaction is sent when the consumer is ready to receive the supply. (At same location as the provider)</semantics>
                        <parameter>
                            <name>SuppliesData</name>
                            <dataType>ArrayOfSupplyStruct</dataType>
                            <semantics>The amount of supplies, by type, that the consumer is able to accept at the time it declares ReadyToReceive.</semantics>
                        </parameter>
                    </interactionClass>
                    <interactionClass>
                        <name>ReadyToReceiveStorage</name>
                        <sharing>PublishSubscribe</sharing>
                        <transportation>HLAreliable</transportation>
                        <order>Receive</order>
                        <semantics>This interaction is sent when the consumer is ready to deliver the supply (receive storage). 
(At same location as the provider)</semantics>
                        <parameter>
                            <name>SuppliesData</name>
                            <dataType>ArrayOfSupplyStruct</dataType>
                            <semantics>This interaction is sent when the consumer is ready to transfer the supply. (At same location as the provider)</semantics>
                        </parameter>
                    </interactionClass>
                </interactionClass>
                <interactionClass>
                    <name>TransportDestroyedEntities</name>
                    <sharing>PublishSubscribe</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>The LOG_TransportDestroyedEntities interaction is used by the service provider federate to give information on managed element to the consumer. This interaction is used only if the provider simulate the destruction of elements managed</semantics>
                    <parameter>
                        <name>DestroyedObjects</name>
                        <dataType>ArrayOfUuid</dataType>
                        <semantics>Allows to follow the elements managed by the provider</semantics>
                    </parameter>
                </interactionClass>
                <interactionClass>
                    <name>TransportDisembarkmentStatus</name>
                    <sharing>PublishSubscribe</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>The LOG_TransportDisembarkmentStatus interaction shall be sent by the service provider federate, to inform the service consumer of the disembarkment state, after the LOG_ServiceStarted interaction</semantics>
                    <parameter>
                        <name>DisembarkedObjects</name>
                        <dataType>ArrayOfUuid</dataType>
                        <semantics>Allows to follow the elements managed by the provider</semantics>
                    </parameter>
                    <parameter>
                        <name>TransportUnitIdentifier</name>
                        <dataType>UuidArrayOfHLAbyte16</dataType>
                        <semantics>Callsign of transporter</semantics>
                    </parameter>
                </interactionClass>
                <interactionClass>
                    <name>TransportEmbarkmentStatus</name>
                    <sharing>PublishSubscribe</sharing>
                    <transportation>HLAreliable</transportation>
                    <order>Receive</order>
                    <semantics>The LOG_TransportEmbarkmentStatus interaction shall be sent by the service provider federate, to inform the service consumer of the embarkment state, after the LOG_ServiceStarted interaction</semantics>
                    <parameter>
                        <name>EmbarkedObjects</name>
                        <dataType>ArrayOfUuid</dataType>
                        <semantics>Allows to follow the elements managed by the provider</semantics>
                    </parameter>
                    <parameter>
                        <name>TransportUnitIdentifier</name>
                        <dataType>UuidArrayOfHLAbyte16</dataType>
                        <semantics>Callsign of transporter</semantics>
                    </parameter>
                </interactionClass>
            </interactionClass>
        </interactionClass>
    </interactions>
    <dataTypes>
        <simpleDataTypes/>
        <enumeratedDataTypes>
            <enumeratedData>
                <name>TransportTypeEnum32</name>
                <representation>HLAinteger32BE</representation>
                <semantics>Type of action, transport, embark or disembark</semantics>
                <enumerator>
                    <name>Transport</name>
                    <value>0</value>
                </enumerator>
                <enumerator>
                    <name>Embarkment</name>
                    <value>1</value>
                </enumerator>
                <enumerator>
                    <name>Disembarkment</name>
                    <value>2</value>
                </enumerator>
            </enumeratedData>
            <enumeratedData>
                <name>OfferTypeEnum32</name>
                <representation>HLAinteger32BE</representation>
                <semantics>Type of the offer (With restriction, positive, negative)</semantics>
                <enumerator>
                    <name>RequestAcknowledgeWithRestriction</name>
                    <value>0</value>
                </enumerator>
                <enumerator>
                    <name>RequestAcknowledgePositive</name>
                    <value>1</value>
                </enumerator>
                <enumerator>
                    <name>RequestAcknowledgeNegative</name>
                    <value>2</value>
                </enumerator>
            </enumeratedData>
            <enumeratedData>
                <name>LOG_ServiceTypeEnum8</name>
                <representation>HLAoctet</representation>
                <semantics>Description of NETN services, extension of RPR2 ServiceTypeEnum8</semantics>
                <enumerator>
                    <name>Other</name>
                    <value>0</value>
                </enumerator>
                <enumerator>
                    <name>Resupply</name>
                    <value>1</value>
                </enumerator>
                <enumerator>
                    <name>Repair</name>
                    <value>2</value>
                </enumerator>
                <enumerator>
                    <name>Storage</name>
                    <value>3</value>
                </enumerator>
                <enumerator>
                    <name>Transport</name>
                    <value>4</value>
                </enumerator>
                <enumerator>
                    <name>CombatAdjudication</name>
                    <value>5</value>
                </enumerator>
            </enumeratedData>
        </enumeratedDataTypes>
        <arrayDataTypes>
            <arrayData>
                <name>ArrayOfRepairStruct</name>
                <dataType>RepairStruct</dataType>
                <cardinality>Dynamic</cardinality>
                <encoding>HLAvariableArray</encoding>
                <semantics>List of repair descriptions (equipment and type of repairs).</semantics>
            </arrayData>
            <arrayData>
                <name>ArrayOfRepairTypeEnum</name>
                <dataType>RepairTypeEnum16</dataType>
                <cardinality>Dynamic</cardinality>
                <encoding>HLAvariableArray</encoding>
                <semantics>List of repair types</semantics>
            </arrayData>
            <arrayData>
                <name>ArrayOfSupplyStruct</name>
                <dataType>SupplyStruct</dataType>
                <cardinality>Dynamic</cardinality>
                <encoding>HLAvariableArray</encoding>
                <semantics></semantics>
            </arrayData>
            <arrayData>
                <name>ServiceDescription</name>
                <dataType>HLAunicodeChar</dataType>
                <cardinality>Dynamic</cardinality>
                <encoding>HLAvariableArray</encoding>
                <semantics>A name associated with the service, e.g. name of the service, the issiuing federate or entity (Callsign).</semantics>
            </arrayData>
        </arrayDataTypes>
        <fixedRecordDataTypes>
            <fixedRecordData>
                <name>RepairStruct</name>
                <encoding>HLAfixedRecord</encoding>
                <semantics>Repairs associated with a specific materiel</semantics>
                <field>
                    <name>MaterielID</name>
                    <dataType>UuidArrayOfHLAbyte16</dataType>
                    <semantics>UUID for the materiel.</semantics>
                </field>
                <field>
                    <name>Repairs</name>
                    <dataType>ArrayOfRepairTypeEnum</dataType>
                    <semantics>List of the types of repair associated with the materiel.</semantics>
                </field>
            </fixedRecordData>
            <fixedRecordData>
                <name>DataEDStruct</name>
                <encoding>HLAfixedRecord</encoding>
                <semantics>Defines the entities to transport, where and when for embarkment or disembarment</semantics>
                <field>
                    <name>ObjectsToManage</name>
                    <dataType>ArrayOfUuid</dataType>
                    <semantics>List with the units to be landing or boarding</semantics>
                </field>
                <field>
                    <name>Appointment</name>
                    <dataType>AppointmentStruct</dataType>
                    <semantics>Expected location for the landing or boarding</semantics>
                </field>
            </fixedRecordData>
            <fixedRecordData>
                <name>DataTStruct</name>
                <encoding>HLAfixedRecord</encoding>
                <semantics>Defines the entities to transport, where and when for pickup and dropoff</semantics>
                <field>
                    <name>ObjectsToManage</name>
                    <dataType>ArrayOfUuid</dataType>
                    <semantics>List with the units to be Transport</semantics>
                </field>
                <field>
                    <name>Appointment</name>
                    <dataType>AppointmentStruct</dataType>
                    <semantics>Expected location for the boarding</semantics>
                </field>
                <field>
                    <name>FinalAppointment</name>
                    <dataType>AppointmentStruct</dataType>
                    <semantics>Expected location for the landing</semantics>
                </field>
            </fixedRecordData>
            <fixedRecordData>
                <name>AppointmentStruct</name>
                <encoding>HLAfixedRecord</encoding>
                <semantics>Date ; Time and Location of an appointment. 
When date and time is set to zero (0), implies no date-time specification</semantics>
                <field>
                    <name>DateTime</name>
                    <dataType>TimeSecInt64</dataType>
                    <semantics>Date time in second since 1 junuary 1970 for the appointment</semantics>
                </field>
                <field>
                    <name>Location</name>
                    <dataType>WorldLocationStruct</dataType>
                    <semantics>Location of the appointment</semantics>
                </field>
            </fixedRecordData>
            <fixedRecordData>
                <name>SupplyStruct</name>
                <encoding>HLAfixedRecord</encoding>
                <semantics>Same as defined in RPR2 Logistics FOM Module.</semantics>
                <field>
                    <name>SupplyType</name>
                    <dataType>EntityTypeStruct</dataType>
                    <semantics>The type of supply (as described in the Bit Encoded Values for Use with Protocols for Distributed Interactive Simulation Applications)</semantics>
                </field>
                <field>
                    <name>Quantity</name>
                    <dataType>QuantityFloat32</dataType>
                    <semantics>The number of units of the supply type.  The unit measure depends on the supply type and shall use the SI units of measurement used for such supplies.</semantics>
                </field>
            </fixedRecordData>
            <fixedRecordData>
                <name>ServiceIdentifier</name>
                <encoding>HLAfixedRecord</encoding>
                <semantics>An ID associated with the service, shall be unique in the federation execution. 
E.g. generate the federate id as a string and use this in the ServiceDescription.</semantics>
                <field>
                    <name>EventCount</name>
                    <dataType>CounterInt32</dataType>
                    <semantics>EventCount shall start at one (1) and then incremented by one (1) for a new NETN Service Provider event and service specified in field Service. 
 
In the case where all possible values are exhausted, the numbers may be reused beginning again at one.</semantics>
                </field>
                <field>
                    <name>Service</name>
                    <dataType>ServiceDescription</dataType>
                    <semantics>A name associated with the service, e.g. name of the service, the issiuing federate or entity (Callsign).</semantics>
                </field>
            </fixedRecordData>
        </fixedRecordDataTypes>
        <variantRecordDataTypes>
            <variantRecordData>
                <name>TransportStruct</name>
                <discriminant>TransportType</discriminant>
                <dataType>TransportTypeEnum32</dataType>
                <alternative>
                    <enumerator>Transport</enumerator>
                    <name>DataTransport</name>
                    <dataType>DataTStruct</dataType>
                    <semantics>Data for transport</semantics>
                </alternative>
                <alternative>
                    <enumerator>Embarkment</enumerator>
                    <name>DataEmbarkment</name>
                    <dataType>DataEDStruct</dataType>
                    <semantics>Data for embarkment</semantics>
                </alternative>
                <alternative>
                    <enumerator>Disembarkment</enumerator>
                    <name>DataDisembarkment</name>
                    <dataType>DataEDStruct</dataType>
                    <semantics>Data for Disembarkment</semantics>
                </alternative>
                <encoding>HLAvariantRecord</encoding>
                <semantics>Transport data</semantics>
            </variantRecordData>
        </variantRecordDataTypes>
    </dataTypes>
    <notes>
        <note>
            <label>netn-log_1</label>
            <semantics>All NETN Logistics services are based on a Logistics Service Pattern that include negotiation, delivery and acceptance of logistics services. The pattern is described below and is implemented as base classes in the NETN LOG FOM Module. 
 
The NETN LOG FOM module extends RPR-FOM v2.0 FOM. Datatypes are re-used and extensions to object classes are defined.</semantics>
        </note>
        <note>
            <label>netn-log_2</label>
            <semantics>RPR-Enumerations: Reprinted with permission from SISO Inc.</semantics>
        </note>
    </notes>
</objectModel>
